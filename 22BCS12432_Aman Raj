104. Maximum Depth of Binary Tree
class Solution {
public:
    int maxDepth(TreeNode* root) {
        if (root == NULL) {
            return 0;
        }
        int left = maxDepth(root->left);
        int right = maxDepth(root->right);

        int ans = max(left, right) + 1;
        return ans;
    }
};

98. Validate Binary Search Tree
class Solution {
public:
    bool isValidBST(TreeNode* root, long long lower = LONG_MIN, long long upper = LONG_MAX) {
        if (!root) {
            return true;
        }
        
        // Check if the current node's value is within the valid range
        if (root->val <= lower || root->val >= upper) {
            return false;
        }

        // Recursively check the left and right subtrees
        return isValidBST(root->left, lower, root->val) && isValidBST(root->right, root->val, upper);
    }
};

101. Symmetric Tree

class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if (!root) {
            return true;
        }
        return isMirror(root->left, root->right);
    }

    bool isMirror(TreeNode* t1, TreeNode* t2) {
        if (!t1 && !t2) {
            return true;
        }
        if (!t1 || !t2) {
            return false;
        }
        return (t1->val == t2->val) 
               && isMirror(t1->left, t2->right) 
               && isMirror(t1->right, t2->left);
    }
};

